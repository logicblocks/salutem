(ns salutem.test.support.jdbc
  (:import
   [javax.sql DataSource]
   [org.jooq.tools.jdbc MockConnection MockDataProvider MockResult MockExecuteContext]
   [org.jooq.impl DSL]
   [org.jooq SQLDialect Record Result Field DSLContext]
   [java.util Collection]))

(defn- dsl []
  ^DSLContext (DSL/using SQLDialect/DEFAULT))

(defn- field [key value]
  ^Field (DSL/field (name key) (class value)))

(defn- fields [record-map]
  ^Collection (map (fn [[key value]] (field key value)) record-map))

(defn- record [record-map]
  (reduce
    (fn [^Record record [key value]]
      (.set record (field key value) value)
      record)
    ^Record (.newRecord
              ^DSLContext (dsl)
              ^Collection (fields record-map))
    record-map))

(defn- result [record-maps]

  (let [records (map record record-maps)
        result ^Result (.newResult
                         ^DSLContext (dsl)
                         ^Collection (fields (first record-maps)))]
    (.addAll result records)
    result))

(defn- results [result-sets]
  (into-array MockResult
    (map
      (fn [[rows record-maps]]
        (MockResult. rows (result record-maps)))
      result-sets)))

(defn- context->map [^MockExecuteContext context]
  {:batch?              (.batch context)
   :batch-single?       (.batchSingle context)
   :batch-multiple?     (.batchMultiple context)
   :batch-sql           (into [] (.batchSQL context))
   :batch-bindings      (into [] (map #(into [] %) (.batchBindings context)))
   :sql                 (.sql context)
   :bindings            (into [] (.bindings context))
   :auto-generated-keys (.autoGeneratedKeys context)
   :column-indexes      (into [] (.columnIndexes context))
   :column-names        (into [] (.columnNames context))
   :out-parameter-types (into [] (.outParameterTypes context))})

(defn mock-connection [data-provider-fn]
  (MockConnection.
    (reify MockDataProvider
      (execute [_ context]
        (results (data-provider-fn (context->map context)))))))

(defn mock-data-source [mock-connection]
  (let [login-timeout (atom nil)]
    (reify DataSource
      (getConnection [_]
        mock-connection)
      (getConnection [_ _ _]
        mock-connection)
      (getLoginTimeout [_] (or @login-timeout 0))
      (setLoginTimeout [_ secs] (reset! login-timeout secs)))))
